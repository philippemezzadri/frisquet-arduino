esphome:
  name: boiler
  includes:
  - custom_component.h

substitutions:
  name: "Chaudière Frisquet"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  password: "86d8d705bb585eaf7a68c592a025884c"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Boiler Fallback Hotspot"
    password: "tzTyXUqS2i2e"

captive_portal:

web_server:
  port: 80

dallas:
  - pin: GPIO26

binary_sensor:
  - platform: status
    name: "Statut ${name}" 

sensor:
  - platform: wifi_signal
    name: "Signal WiFi ${name}"
    update_interval: 60s
    unit_of_measurement: dB
    accuracy_decimals: 0
    force_update: false
    icon: mdi:wifi
  
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.aqara_salon_temperature
    unit_of_measurement: "°C"
    filters:
      - filter_out: nan
      - heartbeat: 5s

  - platform: pid
    name: "Consigne chaudière"
    type: HEAT
    unit_of_measurement: "°C"
    accuracy_decimals: 0
    filters:
      - lambda: |-
          return (x > 0) ? (x * 80) / 100 + 20 : 0;

    
  - platform: pid
    name: "Demande en chaleur"
    type: HEAT
    unit_of_measurement: "%"
    
  - platform: pid
    name: "Valeur PID"
    type: RESULT
    unit_of_measurement: "%"

  - platform: dallas
    address: 0xA2032131AB675C28
    name: "Départ chaudière"

  - platform: dallas
    address: 0xAB03213190136128
    name: "Retour chaudière"
   
climate:
  - platform: pid
    id: pid_climate
    name: "${name}"
    sensor: current_temperature
    default_target_temperature: 20°C
    heat_output: boiler_cmd
    control_parameters:
      min_integral: 0
      kp: 0.5
      ki: 0.00006944
      kd: 0
    visual:
      min_temperature: 7 °C
      max_temperature: 28 °C
      temperature_step: 0.5 °C

output:
  - platform: custom
    type: float
    lambda: |-
      auto boiler_float_output = new FrisquetBoilerFloatOutput(20, 100);
      App.register_component(boiler_float_output);
      return {boiler_float_output};
    outputs:
      id: boiler_cmd

switch:
  - platform: restart
    name: "${name} reboot"

#  - platform: template
#    name: "Manual overrife"
#    turn_on_action: 
#      - lambda: id(boiler_cmd).on_switch_manual_override(true);
#    turn_off_action: 
#      - lambda: id(boiler_cmd).on_switch_manual_override(false);
        
fan:
  - platform: speed
    output: boiler_cmd
    name: "${name} Output"